IPTABLES(8)                                 iptables 1.8.4                                IPTABLES(8)

NNAAMMEE
       iptables/ip6tables — administration tool for IPv4/IPv6 packet filtering and NAT

SSYYNNOOPPSSIISS
       iippttaabblleess [--tt _t_a_b_l_e] {--AA|--CC|--DD} _c_h_a_i_n _r_u_l_e_-_s_p_e_c_i_f_i_c_a_t_i_o_n

       iipp66ttaabblleess [--tt _t_a_b_l_e] {--AA|--CC|--DD} _c_h_a_i_n _r_u_l_e_-_s_p_e_c_i_f_i_c_a_t_i_o_n

       iippttaabblleess [--tt _t_a_b_l_e] --II _c_h_a_i_n [_r_u_l_e_n_u_m] _r_u_l_e_-_s_p_e_c_i_f_i_c_a_t_i_o_n

       iippttaabblleess [--tt _t_a_b_l_e] --RR _c_h_a_i_n _r_u_l_e_n_u_m _r_u_l_e_-_s_p_e_c_i_f_i_c_a_t_i_o_n

       iippttaabblleess [--tt _t_a_b_l_e] --DD _c_h_a_i_n _r_u_l_e_n_u_m

       iippttaabblleess [--tt _t_a_b_l_e] --SS [_c_h_a_i_n [_r_u_l_e_n_u_m]]

       iippttaabblleess [--tt _t_a_b_l_e] {--FF|--LL|--ZZ} [_c_h_a_i_n [_r_u_l_e_n_u_m]] [_o_p_t_i_o_n_s_._._.]

       iippttaabblleess [--tt _t_a_b_l_e] --NN _c_h_a_i_n

       iippttaabblleess [--tt _t_a_b_l_e] --XX [_c_h_a_i_n]

       iippttaabblleess [--tt _t_a_b_l_e] --PP _c_h_a_i_n _t_a_r_g_e_t

       iippttaabblleess [--tt _t_a_b_l_e] --EE _o_l_d_-_c_h_a_i_n_-_n_a_m_e _n_e_w_-_c_h_a_i_n_-_n_a_m_e

       rule-specification = [_m_a_t_c_h_e_s_._._.] [_t_a_r_g_e_t]

       match = --mm _m_a_t_c_h_n_a_m_e [_p_e_r_-_m_a_t_c_h_-_o_p_t_i_o_n_s]

       target = --jj _t_a_r_g_e_t_n_a_m_e [_p_e_r_-_t_a_r_g_e_t_-_o_p_t_i_o_n_s]

DDEESSCCRRIIPPTTIIOONN
       IIppttaabblleess  and  iipp66ttaabblleess are used to set up, maintain, and inspect the tables of IPv4 and IPv6
       packet filter rules in the Linux kernel.  Several different tables may be defined.  Each table
       contains a number of built-in chains and may also contain user-defined chains.

       Each  chain  is a list of rules which can match a set of packets.  Each rule specifies what to
       do with a packet that matches.  This is called a `target', which may be a jump to  a  user-de‐
       fined chain in the same table.

TTAARRGGEETTSS
       A  firewall  rule specifies criteria for a packet and a target.  If the packet does not match,
       the next rule in the chain is examined; if it does match, then the next rule is  specified  by
       the value of the target, which can be the name of a user-defined chain, one of the targets de‐
       scribed in iippttaabblleess--eexxtteennssiioonnss(8), or one of the special values AACCCCEEPPTT, DDRROOPP or RREETTUURRNN.

       AACCCCEEPPTT means to let the packet through.  DDRROOPP means to drop the packet on the  floor.   RREETTUURRNN
       means  stop traversing this chain and resume at the next rule in the previous (calling) chain.
       If the end of a built-in chain is reached or a rule in a built-in chain with target RREETTUURRNN  is
       matched, the target specified by the chain policy determines the fate of the packet.

TTAABBLLEESS
       There  are  currently five independent tables (which tables are present at any time depends on
       the kernel configuration options and which modules are present).

       --tt, ----ttaabbllee _t_a_b_l_e
              This option specifies the packet matching table which the command  should  operate  on.
              If  the  kernel is configured with automatic module loading, an attempt will be made to
              load the appropriate module for that table if it is not already there.

              The tables are as follows:

              ffiilltteerr:
                  This is the default table (if no -t option is passed).  It  contains  the  built-in
                  chains  IINNPPUUTT  (for  packets destined to local sockets), FFOORRWWAARRDD (for packets being
                  routed through the box), and OOUUTTPPUUTT (for locally-generated packets).

              nnaatt:
                  This table is consulted when a packet that creates a new connection is encountered.
                  It  consists  of  four  built-ins: PPRREERROOUUTTIINNGG (for altering packets as soon as they
                  come in), IINNPPUUTT (for altering packets destined for local sockets), OOUUTTPPUUTT (for  al‐
                  tering  locally-generated  packets  before  routing), and PPOOSSTTRROOUUTTIINNGG (for altering
                  packets as they are about to go out).  IPv6 NAT support is available  since  kernel
                  3.7.

              mmaannggllee:
                  This  table  is used for specialized packet alteration.  Until kernel 2.4.17 it had
                  two built-in chains: PPRREERROOUUTTIINNGG (for altering incoming packets before routing)  and
                  OOUUTTPPUUTT  (for  altering  locally-generated  packets  before  routing).  Since kernel
                  2.4.18, three other built-in chains are also supported: IINNPPUUTT (for  packets  coming
                  into  the box itself), FFOORRWWAARRDD (for altering packets being routed through the box),
                  and PPOOSSTTRROOUUTTIINNGG (for altering packets as they are about to go out).

              rraaww:
                  This table is used mainly for configuring exemptions from  connection  tracking  in
                  combination  with  the  NOTRACK  target.   It registers at the netfilter hooks with
                  higher priority and is thus called before ip_conntrack, or any other IP tables.  It
                  provides  the  following  built-in chains: PPRREERROOUUTTIINNGG (for packets arriving via any
                  network interface) OOUUTTPPUUTT (for packets generated by local processes)

              sseeccuurriittyy:
                  This table is used for Mandatory Access Control (MAC)  networking  rules,  such  as
                  those  enabled by the SSEECCMMAARRKK and CCOONNNNSSEECCMMAARRKK targets.  Mandatory Access Control is
                  implemented by Linux Security Modules such  as  SELinux.   The  security  table  is
                  called  after  the  filter  table,  allowing any Discretionary Access Control (DAC)
                  rules in the filter table to take effect before MAC rules.  This table provides the
                  following  built-in  chains: IINNPPUUTT (for packets coming into the box itself), OOUUTTPPUUTT
                  (for altering locally-generated packets before routing), and FFOORRWWAARRDD (for  altering
                  packets being routed through the box).

OOPPTTIIOONNSS
       The  options that are recognized by iippttaabblleess and iipp66ttaabblleess can be divided into several differ‐
       ent groups.

   CCOOMMMMAANNDDSS
       These options specify the desired action to perform. Only one of them can be specified on  the
       command line unless otherwise stated below. For long versions of the command and option names,
       you need to use only enough letters to ensure that iippttaabblleess  can  differentiate  it  from  all
       other options.

       --AA, ----aappppeenndd _c_h_a_i_n _r_u_l_e_-_s_p_e_c_i_f_i_c_a_t_i_o_n
              Append one or more rules to the end of the selected chain.  When the source and/or des‐
              tination names resolve to more than one address, a rule will be added for each possible
              address combination.

       --CC, ----cchheecckk _c_h_a_i_n _r_u_l_e_-_s_p_e_c_i_f_i_c_a_t_i_o_n
              Check  whether a rule matching the specification does exist in the selected chain. This
              command uses the same logic as --DD to find a matching entry, but does not alter the  ex‐
              isting iptables configuration and uses its exit code to indicate success or failure.

       --DD, ----ddeelleettee _c_h_a_i_n _r_u_l_e_-_s_p_e_c_i_f_i_c_a_t_i_o_n
       --DD, ----ddeelleettee _c_h_a_i_n _r_u_l_e_n_u_m
              Delete  one or more rules from the selected chain.  There are two versions of this com‐
              mand: the rule can be specified as a number in the chain (starting at 1 for  the  first
              rule) or a rule to match.

       --II, ----iinnsseerrtt _c_h_a_i_n [_r_u_l_e_n_u_m] _r_u_l_e_-_s_p_e_c_i_f_i_c_a_t_i_o_n
              Insert  one  or  more rules in the selected chain as the given rule number.  So, if the
              rule number is 1, the rule or rules are inserted at the head of  the  chain.   This  is
              also the default if no rule number is specified.

       --RR, ----rreeppllaaccee _c_h_a_i_n _r_u_l_e_n_u_m _r_u_l_e_-_s_p_e_c_i_f_i_c_a_t_i_o_n
              Replace  a  rule in the selected chain.  If the source and/or destination names resolve
              to multiple addresses, the command will fail.  Rules are numbered starting at 1.

       --LL, ----lliisstt [_c_h_a_i_n]
              List all rules in the selected chain.  If no chain is selected, all chains are  listed.
              Like every other iptables command, it applies to the specified table (filter is the de‐
              fault), so NAT rules get listed by
               iptables -t nat -n -L
              Please note that it is often used with the --nn option, in order to  avoid  long  reverse
              DNS  lookups.   It  is legal to specify the --ZZ (zero) option as well, in which case the
              chain(s) will be atomically listed and zeroed.  The exact output  is  affected  by  the
              other arguments given. The exact rules are suppressed until you use
               iptables -L -v
              or iippttaabblleess--ssaavvee(8).

       --SS, ----lliisstt--rruulleess [_c_h_a_i_n]
              Print all rules in the selected chain.  If no chain is selected, all chains are printed
              like iptables-save. Like every other iptables command, it applies to the specified  ta‐
              ble (filter is the default).

       --FF, ----fflluusshh [_c_h_a_i_n]
              Flush  the  selected  chain  (all  the  chains in the table if none is given).  This is
              equivalent to deleting all the rules one by one.

       --ZZ, ----zzeerroo [_c_h_a_i_n [_r_u_l_e_n_u_m]]
              Zero the packet and byte counters in all chains, or only the given chain, or  only  the
              given  rule in a chain. It is legal to specify the --LL, ----lliisstt (list) option as well, to
              see the counters immediately before they are cleared. (See above.)

       --NN, ----nneeww--cchhaaiinn _c_h_a_i_n
              Create a new user-defined chain by the given name.  There must be  no  target  of  that
              name already.

       --XX, ----ddeelleettee--cchhaaiinn [_c_h_a_i_n]
              Delete  the  optional user-defined chain specified.  There must be no references to the
              chain.  If there are, you must delete or replace the referring rules before  the  chain
              can  be  deleted.  The chain must be empty, i.e. not contain any rules.  If no argument
              is given, it will attempt to delete every non-builtin chain in the table.

       --PP, ----ppoolliiccyy _c_h_a_i_n _t_a_r_g_e_t
              Set the policy for the built-in (non-user-defined) chain to the given target.  The pol‐
              icy target must be either AACCCCEEPPTT or DDRROOPP.

       --EE, ----rreennaammee--cchhaaiinn _o_l_d_-_c_h_a_i_n _n_e_w_-_c_h_a_i_n
              Rename  the  user specified chain to the user supplied name.  This is cosmetic, and has
              no effect on the structure of the table.

       --hh     Help.  Give a (currently very brief) description of the command syntax.

   PPAARRAAMMEETTEERRSS
       The following parameters make up a rule specification (as used in the add, delete, insert, re‐
       place and append commands).

       --44, ----iippvv44
              This option has no effect in iptables and iptables-restore.  If a rule using the --44 op‐
              tion is inserted with (and only with) ip6tables-restore, it will be  silently  ignored.
              Any  other uses will throw an error. This option allows IPv4 and IPv6 rules in a single
              rule file for use with both iptables-restore and ip6tables-restore.

       --66, ----iippvv66
              If a rule using the --66 option is inserted with (and  only  with)  iptables-restore,  it
              will  be  silently ignored. Any other uses will throw an error. This option allows IPv4
              and IPv6 rules in a single rule file for use with both iptables-restore and  ip6tables-
              restore.  This option has no effect in ip6tables and ip6tables-restore.

       [!!] --pp, ----pprroottooccooll _p_r_o_t_o_c_o_l
              The  protocol of the rule or of the packet to check.  The specified protocol can be one
              of ttccpp, uuddpp, uuddpplliittee, iiccmmpp, iiccmmppvv66,eesspp, aahh, ssccttpp, mmhh or the special keyword  "aallll",  or
              it  can  be a numeric value, representing one of these protocols or a different one.  A
              protocol name from /etc/protocols is also allowed.  A "!" argument before the  protocol
              inverts the test.  The number zero is equivalent to aallll. "aallll" will match with all pro‐
              tocols and is taken as default when this option is omitted.  Note that,  in  ip6tables,
              IPv6  extension  headers  except  eesspp are not allowed.  eesspp and iippvv66--nnoonneexxtt can be used
              with Kernel version 2.6.11 or later.  The number zero is equivalent to aallll, which means
              that  you  cannot  test  the protocol field for the value 0 directly. To match on a HBH
              header, even if it were the last, you cannot use --pp 00, but always need --mm hhbbhh.

       [!!] --ss, ----ssoouurrccee _a_d_d_r_e_s_s[//_m_a_s_k][,,_._._.]
              Source specification. _A_d_d_r_e_s_s can be either a network name, a hostname,  a  network  IP
              address  (with //_m_a_s_k), or a plain IP address. Hostnames will be resolved once only, be‐
              fore the rule is submitted to the kernel.  Please note that specifying any name  to  be
              resolved  with a remote query such as DNS is a really bad idea.  The _m_a_s_k can be either
              an ipv4 network mask (for iptables) or a plain number, specifying the number of 1's  at
              the  left  side  of  the  network  mask.  Thus, an iptables mask of _2_4 is equivalent to
              _2_5_5_._2_5_5_._2_5_5_._0.  A "!" argument before the address specification inverts  the  sense  of
              the  address.  The  flag  ----ssrrcc is an alias for this option.  Multiple addresses can be
              specified, but this will eexxppaanndd ttoo mmuullttiippllee rruulleess (when adding with -A), or will  cause
              multiple rules to be deleted (with -D).

       [!!] --dd, ----ddeessttiinnaattiioonn _a_d_d_r_e_s_s[//_m_a_s_k][,,_._._.]
              Destination  specification.  See the description of the --ss (source) flag for a detailed
              description of the syntax.  The flag ----ddsstt is an alias for this option.

       --mm, ----mmaattcchh _m_a_t_c_h
              Specifies a match to use, that is, an extension module that tests for a specific  prop‐
              erty. The set of matches make up the condition under which a target is invoked. Matches
              are evaluated first to last as specified on the command line and work in  short-circuit
              fashion, i.e. if one extension yields false, evaluation will stop.

       --jj, ----jjuummpp _t_a_r_g_e_t
              This  specifies the target of the rule; i.e., what to do if the packet matches it.  The
              target can be a user-defined chain (other than the one this rule is  in),  one  of  the
              special  builtin  targets which decide the fate of the packet immediately, or an exten‐
              sion (see EEXXTTEENNSSIIOONNSS below).  If this option is omitted in a rule (and --gg is not used),
              then  matching  the  rule will have no effect on the packet's fate, but the counters on
              the rule will be incremented.

       --gg, ----ggoottoo _c_h_a_i_n
              This specifies that the processing should continue in a user  specified  chain.  Unlike
              the  --jump option return will not continue processing in this chain but instead in the
              chain that called us via --jump.

       [!!] --ii, ----iinn--iinntteerrffaaccee _n_a_m_e
              Name of an interface via which a packet was received (only for packets entering the IINN‐‐
              PPUUTT,  FFOORRWWAARRDD  and PPRREERROOUUTTIINNGG chains).  When the "!" argument is used before the inter‐
              face name, the sense is inverted.  If the interface name ends in a "+", then any inter‐
              face  which begins with this name will match.  If this option is omitted, any interface
              name will match.

       [!!] --oo, ----oouutt--iinntteerrffaaccee _n_a_m_e
              Name of an interface via which a packet is going to be sent (for packets  entering  the
              FFOORRWWAARRDD,  OOUUTTPPUUTT and PPOOSSTTRROOUUTTIINNGG chains).  When the "!" argument is used before the in‐
              terface name, the sense is inverted.  If the interface name ends in a "+", then any in‐
              terface  which begins with this name will match.  If this option is omitted, any inter‐
              face name will match.

       [!!] --ff, ----ffrraaggmmeenntt
              This means that the rule only refers to second and further IPv4 fragments of fragmented
              packets.   Since  there  is  no  way  to tell the source or destination ports of such a
              packet (or ICMP type), such a packet will not match any rules which specify them.  When
              the  "!"  argument  precedes the "-f" flag, the rule will only match head fragments, or
              unfragmented packets. This option is IPv4 specific, it is not available in ip6tables.

       --cc, ----sseett--ccoouunntteerrss _p_a_c_k_e_t_s _b_y_t_e_s
              This enables the administrator to initialize the packet and byte  counters  of  a  rule
              (during IINNSSEERRTT, AAPPPPEENNDD, RREEPPLLAACCEE operations).

   OOTTHHEERR OOPPTTIIOONNSS
       The following additional options can be specified:

       --vv, ----vveerrbboossee
              Verbose  output.   This option makes the list command show the interface name, the rule
              options (if any), and the TOS masks.  The packet and byte  counters  are  also  listed,
              with  the  suffix 'K', 'M' or 'G' for 1000, 1,000,000 and 1,000,000,000 multipliers re‐
              spectively (but see the --xx flag to change this).  For  appending,  insertion,  deletion
              and  replacement,  this causes detailed information on the rule or rules to be printed.
              --vv may be specified multiple times to possibly emit more detailed debug statements.

       --ww, ----wwaaiitt [_s_e_c_o_n_d_s]
              Wait for the xtables lock.  To prevent multiple instances of the program  from  running
              concurrently,  an  attempt  will be made to obtain an exclusive lock at launch.  By de‐
              fault, the program will exit if the lock cannot be obtained.  This option will make the
              program wait (indefinitely or for optional _s_e_c_o_n_d_s) until the exclusive lock can be ob‐
              tained.

       --WW, ----wwaaiitt--iinntteerrvvaall _m_i_c_r_o_s_e_c_o_n_d_s
              Interval to wait per each iteration.   When  running  latency  sensitive  applications,
              waiting  for the xtables lock for extended durations may not be acceptable. This option
              will make each iteration take the amount of time specified. The default interval  is  1
              second. This option only works with --ww.

       --nn, ----nnuummeerriicc
              Numeric  output.   IP addresses and port numbers will be printed in numeric format.  By
              default, the program will try to display them as host names, network names, or services
              (whenever applicable).

       --xx, ----eexxaacctt
              Expand  numbers.   Display  the exact value of the packet and byte counters, instead of
              only the rounded number in K's (multiples of 1000) M's  (multiples  of  1000K)  or  G's
              (multiples of 1000M).  This option is only relevant for the --LL command.

       ----lliinnee--nnuummbbeerrss
              When  listing  rules,  add line numbers to the beginning of each rule, corresponding to
              that rule's position in the chain.

       ----mmooddpprroobbee==_c_o_m_m_a_n_d
              When adding or inserting rules into a chain, use _c_o_m_m_a_n_d to load any necessary  modules
              (targets, match extensions, etc).

MMAATTCCHH AANNDD TTAARRGGEETT EEXXTTEENNSSIIOONNSS
       iptables can use extended packet matching and target modules.  A list of these is available in
       the iippttaabblleess--eexxtteennssiioonnss(8) manpage.

DDIIAAGGNNOOSSTTIICCSS
       Various error messages are printed to standard error.  The exit code is 0  for  correct  func‐
       tioning.   Errors which appear to be caused by invalid or abused command line parameters cause
       an exit code of 2, and other errors cause an exit code of 1.

BBUUGGSS
       Bugs?  What's this? ;-) Well, you might want to have a look at http://bugzilla.netfilter.org/

CCOOMMPPAATTIIBBIILLIITTYY WWIITTHH IIPPCCHHAAIINNSS
       This iippttaabblleess is very similar to ipchains by Rusty Russell.  The main difference is  that  the
       chains  IINNPPUUTT  and OOUUTTPPUUTT are only traversed for packets coming into the local host and origi‐
       nating from the local host respectively.  Hence every packet only passes through  one  of  the
       three  chains  (except  loopback traffic, which involves both INPUT and OUTPUT chains); previ‐
       ously a forwarded packet would pass through all three.

       The other main difference is that --ii refers to the input interface; --oo refers  to  the  output
       interface, and both are available for packets entering the FFOORRWWAARRDD chain.

       The  various forms of NAT have been separated out; iippttaabblleess is a pure packet filter when using
       the default `filter' table, with optional extension modules.  This should simplify much of the
       previous  confusion  over  the combination of IP masquerading and packet filtering seen previ‐
       ously.  So the following options are handled differently:
        -j MASQ
        -M -S
        -M -L
       There are several other changes in iptables.

SSEEEE AALLSSOO
       iippttaabblleess--aappppllyy(8), iippttaabblleess--ssaavvee(8), iippttaabblleess--rreessttoorree(8), iippttaabblleess--eexxtteennssiioonnss(8),

       The packet-filtering-HOWTO details iptables usage for packet filtering, the NAT-HOWTO  details
       NAT,  the  netfilter-extensions-HOWTO details the extensions that are not in the standard dis‐
       tribution, and the netfilter-hacking-HOWTO details the netfilter internals.
       See hhttttpp::////wwwwww..nneettffiilltteerr..oorrgg//.

AAUUTTHHOORRSS
       Rusty Russell originally wrote iptables, in early consultation with Michael Neuling.

       Marc Boucher made Rusty abandon ipnatctl by lobbying for a generic packet selection  framework
       in  iptables, then wrote the mangle table, the owner match, the mark stuff, and ran around do‐
       ing cool stuff everywhere.

       James Morris wrote the TOS target, and tos match.

       Jozsef Kadlecsik wrote the REJECT target.

       Harald Welte wrote the ULOG and NFQUEUE target, the new libiptc, as well as the TTL, DSCP, ECN
       matches and targets.

       The  Netfilter  Core Team is: Jozsef Kadlecsik, Pablo Neira Ayuso, Eric Leblond, Florian West‐
       phal and  Arturo Borrero Gonzalez.  Emeritus Core  Team  members  are:  Marc  Boucher,  Martin
       Josefsson, Yasuyuki Kozakai, James Morris, Harald Welte and Rusty Russell.

       Man page originally written by Herve Eychenne <rv@wallfire.org>.

VVEERRSSIIOONN
       This manual page applies to iptables/ip6tables 1.8.4.

iptables 1.8.4                                                                            IPTABLES(8)
